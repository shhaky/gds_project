//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GDS_HUB.ServiceFromAccM {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceFromAccM.IHub")]
    public interface IHub {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHub/getLastestId", ReplyAction="http://tempuri.org/IHub/getLastestIdResponse")]
        long getLastestId();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHub/getLastestId", ReplyAction="http://tempuri.org/IHub/getLastestIdResponse")]
        System.Threading.Tasks.Task<long> getLastestIdAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHub/checkIfExistedUserName", ReplyAction="http://tempuri.org/IHub/checkIfExistedUserNameResponse")]
        bool checkIfExistedUserName(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHub/checkIfExistedUserName", ReplyAction="http://tempuri.org/IHub/checkIfExistedUserNameResponse")]
        System.Threading.Tasks.Task<bool> checkIfExistedUserNameAsync(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHub/addNewUser", ReplyAction="http://tempuri.org/IHub/addNewUserResponse")]
        bool addNewUser(long userId, string userName, string passWord, string firstName, string lastName, string email, string joinDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHub/addNewUser", ReplyAction="http://tempuri.org/IHub/addNewUserResponse")]
        System.Threading.Tasks.Task<bool> addNewUserAsync(long userId, string userName, string passWord, string firstName, string lastName, string email, string joinDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHub/checkPassword", ReplyAction="http://tempuri.org/IHub/checkPasswordResponse")]
        bool checkPassword(string userName, string passWord);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHub/checkPassword", ReplyAction="http://tempuri.org/IHub/checkPasswordResponse")]
        System.Threading.Tasks.Task<bool> checkPasswordAsync(string userName, string passWord);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IHubChannel : GDS_HUB.ServiceFromAccM.IHub, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class HubClient : System.ServiceModel.ClientBase<GDS_HUB.ServiceFromAccM.IHub>, GDS_HUB.ServiceFromAccM.IHub {
        
        public HubClient() {
        }
        
        public HubClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public HubClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public HubClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public HubClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public long getLastestId() {
            return base.Channel.getLastestId();
        }
        
        public System.Threading.Tasks.Task<long> getLastestIdAsync() {
            return base.Channel.getLastestIdAsync();
        }
        
        public bool checkIfExistedUserName(string userName) {
            return base.Channel.checkIfExistedUserName(userName);
        }
        
        public System.Threading.Tasks.Task<bool> checkIfExistedUserNameAsync(string userName) {
            return base.Channel.checkIfExistedUserNameAsync(userName);
        }
        
        public bool addNewUser(long userId, string userName, string passWord, string firstName, string lastName, string email, string joinDate) {
            return base.Channel.addNewUser(userId, userName, passWord, firstName, lastName, email, joinDate);
        }
        
        public System.Threading.Tasks.Task<bool> addNewUserAsync(long userId, string userName, string passWord, string firstName, string lastName, string email, string joinDate) {
            return base.Channel.addNewUserAsync(userId, userName, passWord, firstName, lastName, email, joinDate);
        }
        
        public bool checkPassword(string userName, string passWord) {
            return base.Channel.checkPassword(userName, passWord);
        }
        
        public System.Threading.Tasks.Task<bool> checkPasswordAsync(string userName, string passWord) {
            return base.Channel.checkPasswordAsync(userName, passWord);
        }
    }
}
