package nl.fontys.cryptoexchange.core;

import static org.junit.Assert.*;

import java.math.BigDecimal;
import java.math.BigInteger;

import nl.fontys.cryptoexchange.core.exeptions.IllegalTradeExeption;

import org.junit.Before;
import org.junit.Test;

public class TradeTest {

	private Trade trade;
	
	private Order orderBUYlow;
	private Order orderBUYhigh;
	
	private Order orderSELLlow;
	private Order orderSELLhigh;
	
	private Order orderOtherCurrency;
	
	
	private static final int LOW_VOLUME = 20;
	
	private static final int HIGH_VOLUME = 20;
	
	@Before
	public void setUp()
	{
		 orderBUYlow = new Order(CurrencyPair.LTC_BTC, IdGenerator.getInstance().getOrderId(), OrderType.BUY, new BigDecimal(20), new BigDecimal(10));
		 orderBUYhigh = new Order(CurrencyPair.LTC_BTC, IdGenerator.getInstance().getOrderId(), OrderType.BUY, new BigDecimal(25), new BigDecimal(50));
			
		 orderSELLlow = new Order(CurrencyPair.LTC_BTC, IdGenerator.getInstance().getOrderId(), OrderType.SELL, new BigDecimal(20), new BigDecimal(10));
		 orderSELLhigh = new Order(CurrencyPair.LTC_BTC, IdGenerator.getInstance().getOrderId(), OrderType.SELL, new BigDecimal(25), new BigDecimal(50));
	
		 orderOtherCurrency = new Order(CurrencyPair.DOGE_BTC, IdGenerator.getInstance().getOrderId(), OrderType.SELL, new BigDecimal(25), new BigDecimal(50));
	
	}
	
	@Test
	public void testConstructorBuyOrderInMarket() {
		
		try {
			trade = new Trade(orderBUYhigh,orderSELLlow);
		} catch (IllegalTradeExeption e) {
			
			e.printStackTrace();
		}
		
		System.out.println(trade);
		
		assertEquals(20, trade.getVolume().toBigInteger().intValue());
		assertEquals(OrderType.BUY, trade.getType());
		
	}

}
