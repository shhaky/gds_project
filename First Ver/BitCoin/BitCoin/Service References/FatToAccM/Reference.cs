//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BitCoin.FatToAccM {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="GDS_HUB", ConfigurationName="FatToAccM.IFatC_to_AccM", CallbackContract=typeof(BitCoin.FatToAccM.IFatC_to_AccMCallback))]
    public interface IFatC_to_AccM {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="GDS_HUB/IFatC_to_AccM/logIn")]
        void logIn(string accountName, string password);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="GDS_HUB/IFatC_to_AccM/logIn")]
        System.Threading.Tasks.Task logInAsync(string accountName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="GDS_HUB/IFatC_to_AccM/checkIfExistedUserNameHUB", ReplyAction="GDS_HUB/IFatC_to_AccM/checkIfExistedUserNameHUBResponse")]
        bool checkIfExistedUserNameHUB(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="GDS_HUB/IFatC_to_AccM/checkIfExistedUserNameHUB", ReplyAction="GDS_HUB/IFatC_to_AccM/checkIfExistedUserNameHUBResponse")]
        System.Threading.Tasks.Task<bool> checkIfExistedUserNameHUBAsync(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="GDS_HUB/IFatC_to_AccM/addNewUserHUB", ReplyAction="GDS_HUB/IFatC_to_AccM/addNewUserHUBResponse")]
        bool addNewUserHUB(long userId, string userName, string passWord, string firstName, string lastName, string email, string joinDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="GDS_HUB/IFatC_to_AccM/addNewUserHUB", ReplyAction="GDS_HUB/IFatC_to_AccM/addNewUserHUBResponse")]
        System.Threading.Tasks.Task<bool> addNewUserHUBAsync(long userId, string userName, string passWord, string firstName, string lastName, string email, string joinDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="GDS_HUB/IFatC_to_AccM/checkPasswordHUB", ReplyAction="GDS_HUB/IFatC_to_AccM/checkPasswordHUBResponse")]
        bool checkPasswordHUB(string userName, string passWord);
        
        [System.ServiceModel.OperationContractAttribute(Action="GDS_HUB/IFatC_to_AccM/checkPasswordHUB", ReplyAction="GDS_HUB/IFatC_to_AccM/checkPasswordHUBResponse")]
        System.Threading.Tasks.Task<bool> checkPasswordHUBAsync(string userName, string passWord);
        
        [System.ServiceModel.OperationContractAttribute(Action="GDS_HUB/IFatC_to_AccM/sendTransaction", ReplyAction="GDS_HUB/IFatC_to_AccM/sendTransactionResponse")]
        bool sendTransaction(string userAccount, string account, int amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="GDS_HUB/IFatC_to_AccM/sendTransaction", ReplyAction="GDS_HUB/IFatC_to_AccM/sendTransactionResponse")]
        System.Threading.Tasks.Task<bool> sendTransactionAsync(string userAccount, string account, int amount);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFatC_to_AccMCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="GDS_HUB/IFatC_to_AccM/confirmation")]
        void confirmation();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="GDS_HUB/IFatC_to_AccM/serverInfo")]
        void serverInfo(string info);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFatC_to_AccMChannel : BitCoin.FatToAccM.IFatC_to_AccM, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FatC_to_AccMClient : System.ServiceModel.DuplexClientBase<BitCoin.FatToAccM.IFatC_to_AccM>, BitCoin.FatToAccM.IFatC_to_AccM {
        
        public FatC_to_AccMClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public FatC_to_AccMClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public FatC_to_AccMClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public FatC_to_AccMClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public FatC_to_AccMClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void logIn(string accountName, string password) {
            base.Channel.logIn(accountName, password);
        }
        
        public System.Threading.Tasks.Task logInAsync(string accountName, string password) {
            return base.Channel.logInAsync(accountName, password);
        }
        
        public bool checkIfExistedUserNameHUB(string userName) {
            return base.Channel.checkIfExistedUserNameHUB(userName);
        }
        
        public System.Threading.Tasks.Task<bool> checkIfExistedUserNameHUBAsync(string userName) {
            return base.Channel.checkIfExistedUserNameHUBAsync(userName);
        }
        
        public bool addNewUserHUB(long userId, string userName, string passWord, string firstName, string lastName, string email, string joinDate) {
            return base.Channel.addNewUserHUB(userId, userName, passWord, firstName, lastName, email, joinDate);
        }
        
        public System.Threading.Tasks.Task<bool> addNewUserHUBAsync(long userId, string userName, string passWord, string firstName, string lastName, string email, string joinDate) {
            return base.Channel.addNewUserHUBAsync(userId, userName, passWord, firstName, lastName, email, joinDate);
        }
        
        public bool checkPasswordHUB(string userName, string passWord) {
            return base.Channel.checkPasswordHUB(userName, passWord);
        }
        
        public System.Threading.Tasks.Task<bool> checkPasswordHUBAsync(string userName, string passWord) {
            return base.Channel.checkPasswordHUBAsync(userName, passWord);
        }
        
        public bool sendTransaction(string userAccount, string account, int amount) {
            return base.Channel.sendTransaction(userAccount, account, amount);
        }
        
        public System.Threading.Tasks.Task<bool> sendTransactionAsync(string userAccount, string account, int amount) {
            return base.Channel.sendTransactionAsync(userAccount, account, amount);
        }
    }
}
